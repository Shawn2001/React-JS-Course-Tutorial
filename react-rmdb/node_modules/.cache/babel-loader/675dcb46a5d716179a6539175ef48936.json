{"ast":null,"code":"var _jsxFileName = \"/Users/shawnlow/Desktop/react-rmdb-v3-starter-files-master/react-rmdb/src/components/SearchBar/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types'; // Image \n\nimport searchIcon from \"../../images/search-icon.svg\"; // Styles \n\nimport { Wrapper, Content } from './SearchBar.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBar = ({\n  setSearchTerm\n}) => {\n  _s();\n\n  const [state, setState] = useState('');\n  const initial = useRef(true);\n  useEffect(() => {\n    // skip the initial render\n    if (initial.current) {\n      initial.current = false;\n      return;\n    }\n\n    const timer = setTimeout(() => {\n      setSearchTerm(state);\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [setSearchTerm, state]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: searchIcon,\n        alt: \"search-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search Movie\",\n        onChange: event => setState(event.currentTarget.value),\n        value: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 7\n  }, this);\n};\n\n_s(SearchBar, \"j4nMfssbIXgIaLQ7f2o61Ed7/hg=\");\n\n_c = SearchBar;\nSearchBar.propTypes = {\n  callback: PropTypes.func\n};\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/shawnlow/Desktop/react-rmdb-v3-starter-files-master/react-rmdb/src/components/SearchBar/index.js"],"names":["React","useState","useEffect","useRef","PropTypes","Wrapper","Content","SearchBar","setSearchTerm","state","setState","initial","current","timer","setTimeout","clearTimeout","searchIcon","event","currentTarget","value","propTypes","callback","func"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;uDAEA;;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,oBAAjC;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAAA;;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMU,OAAO,GAAGR,MAAM,CAAC,IAAD,CAAtB;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACb;AACA,QAAIS,OAAO,CAACC,OAAZ,EAAoB;AACjBD,MAAAA,OAAO,CAACC,OAAR,GAAkB,KAAlB;AACA;AACF;;AAED,UAAMC,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC5BN,MAAAA,aAAa,CAACC,KAAD,CAAb;AACF,KAFuB,EAErB,GAFqB,CAAxB;AAGA,WAAO,MAAMM,YAAY,CAACF,KAAD,CAAzB;AACF,GAXQ,EAWN,CAACL,aAAD,EAAgBC,KAAhB,CAXM,CAAT;AAaA,sBACG,QAAC,OAAD;AAAA,2BACG,QAAC,OAAD;AAAA,8BACG;AAAK,QAAA,GAAG,EAAIO,UAAZ;AAAwB,QAAA,GAAG,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,cADH,eAEG;AACG,QAAA,IAAI,EAAG,MADV;AAEG,QAAA,WAAW,EAAG,cAFjB;AAGG,QAAA,QAAQ,EAAIC,KAAK,IAAIP,QAAQ,CAACO,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAHhC;AAIG,QAAA,KAAK,EAAIV;AAJZ;AAAA;AAAA;AAAA;AAAA,cAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,UADH;AAcF,CAhCD;;GAAMF,S;;KAAAA,S;AAkCNA,SAAS,CAACa,SAAV,GAAsB;AACnBC,EAAAA,QAAQ,EAAEjB,SAAS,CAACkB;AADD,CAAtB;AAIA,eAAef,SAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n// Image \nimport searchIcon from '../../images/search-icon.svg'\n// Styles \nimport { Wrapper, Content } from './SearchBar.styles';\n\nconst SearchBar = ({ setSearchTerm }) => {\n   const [state, setState] = useState('');\n   const initial = useRef(true)\n\n   \n   useEffect(() => {\n      // skip the initial render\n      if (initial.current){\n         initial.current = false;\n         return;\n      }\n      \n      const timer = setTimeout(() => {\n         setSearchTerm(state);\n      }, 500)      \n      return () => clearTimeout(timer);\n   }, [setSearchTerm, state])\n\n   return (\n      <Wrapper>\n         <Content>\n            <img src = {searchIcon} alt='search-icon' />\n            <input\n               type = 'text'\n               placeholder = 'Search Movie'\n               onChange = {event => setState(event.currentTarget.value)}\n               value = {state}\n            />\n         </Content>\n\n      </Wrapper>\n   )\n}\n\nSearchBar.propTypes = {\n   callback: PropTypes.func\n}\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}