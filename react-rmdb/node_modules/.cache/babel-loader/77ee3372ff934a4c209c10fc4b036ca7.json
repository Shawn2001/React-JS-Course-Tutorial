{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; // API\n\nimport API from '../API'; // Helpers\n\nimport { isPersistedState } from '../helpers';\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  // [stateValue, setter for the state]\n  const [searchTerm, setSearchTerm] = useState('');\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const fetchMovies = async (page, searchTerm = \"\") => {\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      setState(prev => ({ ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (!searchTerm) {\n      // if got session storage load the session storage\n      const sessionState = isPersistedState('homeState');\n\n      if (sessionState) {\n        setState(sessionState);\n        return;\n      }\n    }\n\n    setState(initialState);\n    fetchMovies(1, searchTerm);\n  }, [searchTerm]); // Load More\n\n  useEffect(() => {\n    if (!isLoadingMore) return;\n    fetchMovies(state.page + 1, searchTerm);\n    setIsLoadingMore(false);\n  }, [isLoadingMore, searchTerm, state.page]); // Write to Session Storage\n\n  useEffect(() => {\n    if (!searchTerm) {\n      sessionStorage.setItem('homeState', JSON.stringify(state));\n    }\n  }, [searchTerm, state]);\n  return {\n    state,\n    loading,\n    error,\n    setSearchTerm,\n    searchTerm,\n    setIsLoadingMore\n  };\n};\n\n_s(useHomeFetch, \"h4RUEubeaoJo530jU7BUySnkVAY=\");","map":{"version":3,"sources":["/Users/shawnlow/Desktop/react-rmdb-v3-starter-files-master/React-JS-Course-Tutorial/react-rmdb/src/hooks/useHomeFetch.js"],"names":["useState","useEffect","API","isPersistedState","initialState","page","results","total_pages","total_results","useHomeFetch","searchTerm","setSearchTerm","state","setState","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","fetchMovies","movies","prev","sessionState","sessionStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react';\n\n// API\nimport API from '../API'\n// Helpers\nimport { isPersistedState } from '../helpers';\n\nconst initialState = {\n    page : 0,\n    results: [],\n    total_pages: 0,\n    total_results: 0\n}\n\nexport const useHomeFetch = () => {\n    // [stateValue, setter for the state]\n    const [searchTerm, setSearchTerm] = useState('')\n    const [state, setState] = useState(initialState);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [isLoadingMore, setIsLoadingMore] = useState(false)\n\n    const fetchMovies = async (page, searchTerm = \"\") => {\n        try {\n            setError(false);\n            setLoading(true);\n\n            const movies = await API.fetchMovies(searchTerm, page);\n\n            setState(prev => ({\n                ...movies,\n                results:\n                    page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n            }));\n        } catch(error){\n            setError(true);\n        }\n        setLoading(false);\n    }\n\n    useEffect(() => {\n        if (!searchTerm){\n            // if got session storage load the session storage\n            const sessionState = isPersistedState('homeState');\n\n            if (sessionState) {\n                setState(sessionState);\n                return;\n            }\n        }\n        setState(initialState);\n        fetchMovies(1, searchTerm)\n    }, [searchTerm])\n\n    // Load More\n    useEffect(() => {\n        if (!isLoadingMore) return;\n\n        fetchMovies(state.page + 1, searchTerm);\n        setIsLoadingMore(false);\n\n    }, [isLoadingMore, searchTerm, state.page])\n\n    // Write to Session Storage\n    useEffect(() => {\n        if (!searchTerm) {\n            sessionStorage.setItem('homeState', JSON.stringify(state))\n        }\n    }, [searchTerm, state])\n\n    return {state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore}\n}"]},"metadata":{},"sourceType":"module"}