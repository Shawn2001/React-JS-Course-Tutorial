{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react'; // API\n\nimport API from '../API';\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  // [stateValue, setter for the state]\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetchMovies = async (page, searchTerm = \"\") => {\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      setState(prev => ({ ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchMovies(1);\n  }, []);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useHomeFetch, \"KZgOLoECbee4UfZq/rbGpTsqoEw=\");","map":{"version":3,"sources":["/Users/shawnlow/Desktop/react-rmdb-v3-starter-files-master/react-rmdb/src/hooks/useHomeFetch.js"],"names":["useState","useEffect","useRef","API","initialState","page","results","total_pages","total_results","useHomeFetch","state","setState","loading","setLoading","error","setError","fetchMovies","searchTerm","movies","prev"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,QAA0C,OAA1C,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAG,CADU;AAEjBC,EAAAA,OAAO,EAAE,EAFQ;AAGjBC,EAAAA,WAAW,EAAE,CAHI;AAIjBC,EAAAA,aAAa,EAAE;AAJE,CAArB;AAOA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAC9B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACI,YAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMgB,WAAW,GAAG,OAAOX,IAAP,EAAaY,UAAU,GAAG,EAA1B,KAAiC;AACjD,QAAI;AACAF,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMK,MAAM,GAAG,MAAMf,GAAG,CAACa,WAAJ,CAAgBC,UAAhB,EAA4BZ,IAA5B,CAArB;AAEAM,MAAAA,QAAQ,CAACQ,IAAI,KAAK,EACd,GAAGD,MADW;AAEdZ,QAAAA,OAAO,EACHD,IAAI,GAAG,CAAP,GAAW,CAAC,GAAGc,IAAI,CAACb,OAAT,EAAkB,GAAGY,MAAM,CAACZ,OAA5B,CAAX,GAAkD,CAAC,GAAGY,MAAM,CAACZ,OAAX;AAHxC,OAAL,CAAL,CAAR;AAKH,KAXD,CAWE,OAAMQ,KAAN,EAAY;AACVC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAhBD;;AAkBAZ,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,WAAW,CAAC,CAAD,CAAX;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAACN,IAAAA,KAAD;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACH,CA7BM;;GAAML,Y","sourcesContent":["import {useState, useEffect, useRef} from 'react';\n\n// API\nimport API from '../API'\n\nconst initialState = {\n    page : 0,\n    results: [],\n    total_pages: 0,\n    total_results: 0\n}\n\nexport const useHomeFetch = () => {\n    // [stateValue, setter for the state]\n    const [state, setState] = useState(initialState);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    const fetchMovies = async (page, searchTerm = \"\") => {\n        try {\n            setError(false);\n            setLoading(true);\n\n            const movies = await API.fetchMovies(searchTerm, page);\n\n            setState(prev => ({\n                ...movies,\n                results:\n                    page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n            }));\n        } catch(error){\n            setError(true);\n        }\n        setLoading(false);\n    }\n\n    useEffect(() => {\n        fetchMovies(1)\n    }, [])\n\n    return {state, loading, error}\n}"]},"metadata":{},"sourceType":"module"}