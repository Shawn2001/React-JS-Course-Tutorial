{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport API from '../API'; // Helpers\n\nimport { isPersistedState } from '../helpers';\nexport const useMovieFetch = movieId => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n        const movie = await API.fetchMovie(movieId);\n        const credits = await API.fetchCredits(movieId); // Get directors only \n\n        const directors = credits.crew.filter(member => member.job === 'Director');\n        setState({ ...movie,\n          actors: credits.cast,\n          directors: directors\n        });\n        setLoading(false);\n      } catch (error) {\n        setError(true);\n      }\n    };\n\n    const sessionState = isPersistedState(movieId);\n\n    if (sessionState) {\n      setState(sessionState);\n      setLoading(false);\n    }\n\n    fetchMovie();\n  }, [movieId]); // Write to sessionStorage\n\n  useEffect(() => {\n    sessionStorage.setItem(movieId, JSON.stringify(state));\n  });\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useMovieFetch, \"4jum5QU8vOmk64k7a/gEpScFWmo=\");","map":{"version":3,"sources":["/Users/shawnlow/Desktop/react-rmdb-v3-starter-files-master/React-JS-Course-Tutorial/react-rmdb/src/hooks/useMovieFetch.js"],"names":["useState","useEffect","API","isPersistedState","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchMovie","movie","credits","fetchCredits","directors","crew","filter","member","job","actors","cast","sessionState","sessionStorage","setItem","JSON","stringify"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,QAAhB,C,CACA;;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AAAA;;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMW,UAAU,GAAG,YAAW;AAC3B,UAAI;AACDH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,cAAME,KAAK,GAAG,MAAMX,GAAG,CAACU,UAAJ,CAAeP,OAAf,CAApB;AACA,cAAMS,OAAO,GAAG,MAAMZ,GAAG,CAACa,YAAJ,CAAiBV,OAAjB,CAAtB,CALC,CAMD;;AACA,cAAMW,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAb,CACfC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADV,CAAlB;AAIAb,QAAAA,QAAQ,CAAC,EACN,GAAGM,KADG;AAENQ,UAAAA,MAAM,EAAEP,OAAO,CAACQ,IAFV;AAGNN,UAAAA,SAAS,EAAEA;AAHL,SAAD,CAAR;AAKAP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACF,OAjBD,CAiBE,OAAOC,KAAP,EAAa;AACZC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACF;AACH,KArBD;;AAuBA,UAAMY,YAAY,GAAGpB,gBAAgB,CAACE,OAAD,CAArC;;AAEA,QAAIkB,YAAJ,EAAkB;AACfhB,MAAAA,QAAQ,CAACgB,YAAD,CAAR;AACAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACF;;AAEDG,IAAAA,UAAU;AACZ,GAhCQ,EAgCN,CAACP,OAAD,CAhCM,CAAT,CALuC,CAuCvC;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACbuB,IAAAA,cAAc,CAACC,OAAf,CAAuBpB,OAAvB,EAAgCqB,IAAI,CAACC,SAAL,CAAerB,KAAf,CAAhC;AACF,GAFQ,CAAT;AAIA,SAAO;AAAEA,IAAAA,KAAF;AAASE,IAAAA,OAAT;AAAkBE,IAAAA;AAAlB,GAAP;AACF,CA7CM;;GAAMN,a","sourcesContent":["import { useState, useEffect } from 'react';\nimport API from '../API';\n// Helpers\nimport { isPersistedState } from '../helpers';\n\nexport const useMovieFetch = (movieId) => {\n   const [state, setState] = useState({});\n   const [loading, setLoading] = useState(true);\n   const [error, setError] = useState(false);\n\n   useEffect(() => {\n      const fetchMovie = async() => {\n         try {\n            setLoading(true);\n            setError(false);\n\n            const movie = await API.fetchMovie(movieId);\n            const credits = await API.fetchCredits(movieId);\n            // Get directors only \n            const directors = credits.crew.filter(\n               member => member.job === 'Director'\n            );\n\n            setState({\n               ...movie,\n               actors: credits.cast,\n               directors: directors\n            });\n            setLoading(false)\n         } catch (error){\n            setError(true)\n         }\n      }\n\n      const sessionState = isPersistedState(movieId);\n\n      if (sessionState) {\n         setState(sessionState);\n         setLoading(false)\n      }\n\n      fetchMovie();\n   }, [movieId]);\n\n   // Write to sessionStorage\n   useEffect(() => {\n      sessionStorage.setItem(movieId, JSON.stringify(state))\n   })\n\n   return { state, loading, error }\n}"]},"metadata":{},"sourceType":"module"}