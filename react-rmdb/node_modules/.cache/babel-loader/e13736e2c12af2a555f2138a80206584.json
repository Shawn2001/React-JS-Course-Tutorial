{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport API from '../API';\nexport const useMovieFetch = movieId => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n        const movie = await API.fetchMovie(movieId);\n        const credits = await API.fetchCredits(movieId); // Get directors only \n\n        const directors = credits.crew.filter(member => member.job === 'Director');\n        setState({ ...movie,\n          actors: credits.cast,\n          directors: directors\n        });\n        setLoading(false);\n      } catch (error) {\n        setError(true);\n      }\n    };\n\n    fetchMovie();\n  }, [movieId]);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useMovieFetch, \"H9fMDtHieNoIS0cJiyLVriXyWm0=\");","map":{"version":3,"sources":["/Users/shawnlow/Desktop/react-rmdb-v3-starter-files-master/react-rmdb/src/hooks/useMovieFetch.js"],"names":["useState","useEffect","API","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchMovie","movie","credits","fetchCredits","directors","crew","filter","member","job","actors","cast"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AAAA;;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMU,UAAU,GAAG,YAAW;AAC3B,UAAI;AACDH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,cAAME,KAAK,GAAG,MAAMV,GAAG,CAACS,UAAJ,CAAeP,OAAf,CAApB;AACA,cAAMS,OAAO,GAAG,MAAMX,GAAG,CAACY,YAAJ,CAAiBV,OAAjB,CAAtB,CALC,CAMD;;AACA,cAAMW,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAb,CACfC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADV,CAAlB;AAIAb,QAAAA,QAAQ,CAAC,EACN,GAAGM,KADG;AAENQ,UAAAA,MAAM,EAAEP,OAAO,CAACQ,IAFV;AAGNN,UAAAA,SAAS,EAAEA;AAHL,SAAD,CAAR;AAKAP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACF,OAjBD,CAiBE,OAAOC,KAAP,EAAa;AACZC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACF;AACH,KArBD;;AAsBAC,IAAAA,UAAU;AACZ,GAxBQ,EAwBN,CAACP,OAAD,CAxBM,CAAT;AA0BA,SAAO;AAAEC,IAAAA,KAAF;AAASE,IAAAA,OAAT;AAAkBE,IAAAA;AAAlB,GAAP;AACF,CAhCM;;GAAMN,a","sourcesContent":["import { useState, useEffect } from 'react';\nimport API from '../API';\n\nexport const useMovieFetch = (movieId) => {\n   const [state, setState] = useState({});\n   const [loading, setLoading] = useState(true);\n   const [error, setError] = useState(false);\n\n   useEffect(() => {\n      const fetchMovie = async() => {\n         try {\n            setLoading(true);\n            setError(false);\n\n            const movie = await API.fetchMovie(movieId);\n            const credits = await API.fetchCredits(movieId);\n            // Get directors only \n            const directors = credits.crew.filter(\n               member => member.job === 'Director'\n            );\n\n            setState({\n               ...movie,\n               actors: credits.cast,\n               directors: directors\n            });\n            setLoading(false)\n         } catch (error){\n            setError(true)\n         }\n      }\n      fetchMovie();\n   }, [movieId])\n\n   return { state, loading, error }\n}"]},"metadata":{},"sourceType":"module"}